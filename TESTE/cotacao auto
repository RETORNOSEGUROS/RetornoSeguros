<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Simulador de Seguro Auto — Questionário Interativo</title>
  <style>
    :root {
      --bg: #0e1726;
      --card: #121c30;
      --muted: #8ea4c8;
      --primary: #4f46e5;
      --primary-2: #22c55e;
      --danger: #ef4444;
      --white: #f8fafc;
      --shadow: 0 10px 30px rgba(0,0,0,.35);
    }
    * { box-sizing: border-box; }
    body { margin: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, 'Helvetica Neue', Arial; background: radial-gradient(1200px 600px at 80% -10%, #1b2c5c33, transparent), var(--bg); color: var(--white); min-height: 100dvh; display:flex; align-items:center; justify-content:center; padding: 24px; }
    .app { width: min(980px, 100%); }
    .card { background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02)); border: 1px solid rgba(255,255,255,.08); border-radius: 20px; box-shadow: var(--shadow); overflow:hidden; position: relative; }
    header { display:flex; align-items:center; justify-content:space-between; padding: 18px 20px; gap: 8px; background: #0f1a2eaa; border-bottom: 1px solid rgba(255,255,255,.06); position: sticky; top: 0; backdrop-filter: blur(8px); }
    header .brand { display:flex; align-items:center; gap: 10px; font-weight: 700; letter-spacing:.3px; }
    header .brand .dot { width: 10px; height: 10px; border-radius: 50%; background: linear-gradient(135deg, var(--primary), var(--primary-2)); box-shadow: 0 0 0 3px #22c55e22; }
    .progress { flex:1; height: 8px; background: rgba(255,255,255,.08); border-radius: 99px; margin: 0 14px; overflow:hidden; }
    .progress > div { height:100%; width:0%; background: linear-gradient(90deg, var(--primary), var(--primary-2)); transition: width .5s ease; }
    main { padding: 26px; }
    .step-wrap { position: relative; min-height: 280px; }
    .step { position:absolute; inset:0; opacity:0; transform: translateY(12px) scale(.98); transition: opacity .4s ease, transform .4s ease; pointer-events:none; }
    .step.active { opacity:1; transform: translateY(0) scale(1); pointer-events:auto; }
    .kicker { color: var(--muted); font-size: 14px; text-transform: uppercase; letter-spacing: .16em; }
    h1 { margin: 6px 0 14px; font-size: clamp(22px, 4vw, 34px); line-height: 1.15; }
    p.lead { color: #c9d7f2; margin: 0 0 14px; }
    .field { margin: 18px 0; }
    label { display:block; font-size: 14px; color: var(--muted); margin-bottom: 8px; }
    input[type="text"], input[type="number"], select { width: 100%; padding: 14px 16px; border-radius: 12px; background: #0b1424; color: var(--white); border: 1px solid rgba(255,255,255,.12); outline: none; font-size: 16px; transition: border-color .2s, box-shadow .2s; }
    input:focus, select:focus { border-color: var(--primary); box-shadow: 0 0 0 4px rgba(79,70,229,.15); }
    .choices { display:grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 10px; }
    .choice { padding: 14px; border-radius: 14px; border: 1px solid rgba(255,255,255,.12); background:#0b1424; cursor:pointer; display:flex; align-items:center; gap:10px; }
    .choice input { appearance: none; width:18px; height:18px; border-radius:50%; border:2px solid var(--muted); display:inline-block; position:relative; }
    .choice input:checked { border-color: var(--primary-2); }
    .choice input:checked::after { content:""; position:absolute; inset:3px; background: var(--primary-2); border-radius:50%; }
    .actions { display:flex; flex-wrap:wrap; gap:10px; justify-content:space-between; align-items:center; margin-top: 10px; }
    .btn { padding: 12px 16px; border-radius: 12px; border: 1px solid rgba(255,255,255,.15); color: var(--white); background: #0b1424; cursor:pointer; font-weight:600; }
    .btn.primary { background: linear-gradient(90deg, var(--primary), var(--primary-2)); border: none; }
    .btn.ghost { background: transparent; }
    .btn:disabled { opacity:.5; cursor:not-allowed; }
    .hint { font-size: 13px; color: var(--muted); margin-top: 6px; }
    .error { color: var(--danger); font-size: 14px; margin-top: 8px; display:none; }
    .error.show { display:block; }
    .summary { display:grid; gap: 10px; grid-template-columns: repeat(auto-fit, minmax(220px,1fr)); }
    .pill { background: #0b1424; border: 1px solid rgba(255,255,255,.1); padding: 14px; border-radius: 14px; }
    .pill .t { color: var(--muted); font-size: 12px; text-transform: uppercase; letter-spacing:.12em; }
    .pill .v { font-size: 18px; font-weight: 700; margin-top: 6px; }
    footer { padding: 18px 20px; display:flex; flex-wrap:wrap; gap:12px; align-items:center; justify-content:space-between; border-top: 1px solid rgba(255,255,255,.06); background: #0f1a2eaa; }
    footer small { color: var(--muted); }
    .badge { font-size: 12px; padding: 6px 10px; background:#0b1424; border:1px solid rgba(255,255,255,.12); border-radius: 999px; }
  </style>
</head>
<body>
  <div class="app">
    <div class="card">
      <header>
        <div class="brand"><span class="dot"></span><span>Seguro Auto — Descoberta Guiada</span></div>
        <div class="progress" aria-label="progresso"><div id="progressbar"></div></div>
        <span class="badge" id="stepCounter">1/1</span>
      </header>
      <main>
        <div class="step-wrap" id="steps"></div>
        <div class="actions">
          <button class="btn ghost" id="btnBack" aria-label="Voltar">⟵ Voltar</button>
          <div style="display:flex; gap:10px; align-items:center;">
            <button class="btn" id="btnSave" title="Salvar rascunho no dispositivo">Salvar</button>
            <button class="btn primary" id="btnNext" aria-label="Próximo">Continuar</button>
          </div>
        </div>
      </main>
      <footer>
        <small>Suas respostas ajudam a estimar um prêmio e coberturas adequadas ao seu perfil de risco.</small>
        <div style="display:flex; gap:8px; flex-wrap:wrap;">
          <a class="badge" id="ctaWhats" href="#">Enviar pelo WhatsApp</a>
          <a class="badge" id="ctaEmail" href="#">Enviar por e‑mail</a>
        </div>
      </footer>
    </div>
  </div>

  <script>
    // ===== Core State =====
    const state = JSON.parse(localStorage.getItem('autoQuizState') || '{}');
    const stepsEl = document.getElementById('steps');
    const progressEl = document.getElementById('progressbar');
    const stepCounter = document.getElementById('stepCounter');
    const btnBack = document.getElementById('btnBack');
    const btnNext = document.getElementById('btnNext');
    const btnSave = document.getElementById('btnSave');
    const ctaWhats = document.getElementById('ctaWhats');
    const ctaEmail = document.getElementById('ctaEmail');

    const fmt = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' });

    // ===== Helpers =====
    const Q = {
      text: ({ id, label, placeholder, required = true, transform }) => ({ id, render: () => `
        <div class="field">
          <label for="${id}">${label}</label>
          <input id="${id}" type="text" placeholder="${placeholder || ''}" value="${state[id] || ''}" />
          <div class="error" id="err-${id}">Informe este campo.</div>
        </div>`,
        value: () => {
          const raw = document.getElementById(id).value.trim();
          return transform ? transform(raw) : raw;
        },
        validate: (v) => !required || v.length >= 2,
        onSave: (v) => state[id] = v,
      }),
      number: ({ id, label, min = 0, step = 1, placeholder, required = true }) => ({ id, render: () => `
        <div class="field">
          <label for="${id}">${label}</label>
          <input id="${id}" type="number" inputmode="decimal" min="${min}" step="${step}" placeholder="${placeholder || ''}" value="${state[id] ?? ''}" />
          <div class="error" id="err-${id}">Valor inválido.</div>
        </div>`,
        value: () => document.getElementById(id).value,
        validate: (v) => !required || (v !== '' && Number(v) >= min),
        onSave: (v) => state[id] = Number(v),
      }),
      select: ({ id, label, options, required = true }) => ({ id, render: () => `
        <div class="field">
          <label for="${id}">${label}</label>
          <select id="${id}">
            <option value="">Selecione...</option>
            ${options.map(o => `<option value="${o.value}" ${state[id] == o.value ? 'selected' : ''}>${o.label}</option>`).join('')}
          </select>
          <div class="error" id="err-${id}">Escolha uma opção.</div>
        </div>`,
        value: () => document.getElementById(id).value,
        validate: (v) => !required || v !== '',
        onSave: (v) => state[id] = v,
      }),
      choices: ({ id, label, choices, required = true }) => ({ id, render: () => `
        <div class="field">
          <label>${label}</label>
          <div class="choices">
            ${choices.map((c) => {
              const checked = state[id] === c.value ? 'checked' : '';
              return `<label class=\"choice\"><input type=\"radio\" name=\"${id}\" value=\"${c.value}\" ${checked}/><span>${c.label}</span></label>`
            }).join('')}
          </div>
          <div class="error" id="err-${id}">Selecione uma resposta.</div>
        </div>`,
        value: () => (document.querySelector(`input[name="${id}"]:checked`) || {}).value || '',
        validate: (v) => !required || v !== '',
        onSave: (v) => state[id] = v,
      })
    };

    // ===== Risk Model (didático, aproximado) =====
    function riskPricing() {
      // Inputs principais
      const fipe = Number(state.valorFipe || 0);
      const idadeCond = Number(state.idade || 30);
      const bonus = Number(state.classeBonus || 0); // 0..10
      const uso = state.usoVeiculo || 'particular';
      const pernoite = state.pernoite || 'garagem_privada';
      const cidade = (state.cidade || '').toLowerCase();
      const km = Number(state.kmMes || 800);
      const sinistros = Number(state.sinistros36 || 0);
      const blindado = state.blindado === 'sim';

      // Base: taxa % sobre FIPE, ajustada por faixa de valor
      let taxaBase = 0.045; // 4,5% a.a. base
      if (fipe <= 50000) taxaBase = 0.055;
      else if (fipe <= 120000) taxaBase = 0.045;
      else taxaBase = 0.038;

      // Fatores multiplicadores
      let fator = 1.0;
      // idade
      if (idadeCond < 25) fator *= 1.35; else if (idadeCond < 30) fator *= 1.15; else if (idadeCond > 60) fator *= 1.12;
      // bônus (desconto progressivo)
      const descBonus = Math.min(0.35, bonus * 0.04); // até 35%
      fator *= (1 - descBonus);
      // uso
      if (uso === 'app') fator *= 1.25; else if (uso === 'trabalho') fator *= 1.10;
      // pernoite
      if (pernoite === 'via_publica') fator *= 1.30; else if (pernoite === 'garagem_coletiva') fator *= 1.10;
      // cidade risco (exemplo didático: capitais maiores um pouco acima)
      if (/sao paulo|rio de janeiro|salvador|recife|fortaleza|belo horizonte/.test(cidade)) fator *= 1.12;
      // km mensal
      if (km > 1200) fator *= 1.08; else if (km < 500) fator *= 0.96;
      // sinistros últimos 36m
      if (sinistros >= 2) fator *= 1.35; else if (sinistros === 1) fator *= 1.15;
      // blindado
      if (blindado) fator *= 1.25;

      const premioAnualBase = fipe * taxaBase * fator;

      // Coberturas opcionais simples
      const terceiros = Number(state.terceiros || 100000); // LMI
      const assistKm = Number(state.assistencia || 200); // raio km
      const vidros = state.vidros || 'basico';
      const carroReserva = state.carroReserva || '7';
      const franquia = state.franquia || 'normal';

      let adicionais = 0;
      adicionais += (terceiros/100000) * 120; // cada 100k ≈ +R$120/ano
      adicionais += assistKm > 200 ? 80 : 40; // 200km vs 100km
      if (vidros === 'completo') adicionais += 160; else if (vidros === 'ampliado') adicionais += 80;
      if (carroReserva === '15') adicionais += 90; else if (carroReserva === '30') adicionais += 180;
      if (franquia === 'reduzida') adicionais += 220; else if (franquia === 'majorada') adicionais -= 140;

      const premioAnual = Math.max(600, premioAnualBase + adicionais); // piso didático
      const premioMensal = premioAnual / 12;
      return { premioAnual, premioMensal, taxaBase, fator };
    }

    // ===== Steps =====
    const steps = [
      { id:'intro', title:'Vamos proteger seu carro, do seu jeito', lead:'Leva menos de 3 minutos. No fim você recebe uma prévia do prêmio e envia por WhatsApp.', fields:[
        Q.text({ id:'nome', label:'Seu nome', placeholder:'Ex.: Carlos Lima' })
      ]},
      { id:'veiculo1', title: () => `Olá, ${state.nome?.split(' ')[0] || ''}! Sobre o veículo…`, lead:'Informe alguns dados básicos.', fields:[
        Q.text({ id:'marcaModelo', label:'Marca / Modelo', placeholder:'Ex.: Chevrolet Onix 1.0' }),
        Q.number({ id:'anoModelo', label:'Ano/Modelo', min:1995, step:1, placeholder:'Ex.: 2021' }),
        Q.number({ id:'valorFipe', label:'Valor FIPE estimado (R$)', min:10000, step:500, placeholder:'Ex.: 75.000' }),
      ]},
      { id:'veiculo2', title:'Uso do veículo', lead:'Isso impacta diretamente o risco segurado.', fields:[
        Q.choices({ id:'usoVeiculo', label:'Uso principal', choices:[
          { value:'particular', label:'Particular' },
          { value:'trabalho', label:'Trabalho (visitas, rotas)' },
          { value:'app', label:'Aplicativo (Uber/99 etc.)' },
        ]}),
        Q.choices({ id:'pernoite', label:'Onde o carro dorme?', choices:[
          { value:'garagem_privada', label:'Garagem residencial fechada' },
          { value:'garagem_coletiva', label:'Garagem coletiva/condomínio' },
          { value:'via_publica', label:'Via pública' },
        ]}),
        Q.number({ id:'kmMes', label:'Quilometragem média mensal (km)', min:0, step:50, placeholder:'Ex.: 800' }),
      ]},
      { id:'condutor', title:'Perfil do principal condutor', lead:'Seja você ou outra pessoa que mais dirige.', fields:[
        Q.number({ id:'idade', label:'Idade', min:18, step:1, placeholder:'Ex.: 34' }),
        Q.select({ id:'tempoCNH', label:'Tempo de CNH', options:[
          { value:'<2', label:'Menos de 2 anos' },
          { value:'2-5', label:'Entre 2 e 5 anos' },
          { value:'>5', label:'Mais de 5 anos' },
        ]}),
        Q.number({ id:'sinistros36', label:'Qtde de sinistros nos últimos 36 meses', min:0, step:1, placeholder:'0' }),
        Q.number({ id:'classeBonus', label:'Classe de bônus (0–10)', min:0, step:1, placeholder:'Ex.: 4' }),
        Q.choices({ id:'blindado', label:'Veículo blindado?', choices:[
          { value:'nao', label:'Não' },
          { value:'sim', label:'Sim' },
        ]}),
      ]},
      { id:'local', title:'Onde circula e pernoita', lead:'CEP e cidade ajudam a localizar o risco.', fields:[
        Q.text({ id:'cep', label:'CEP de pernoite', placeholder:'Ex.: 01310-000', required:false, transform:(v)=>v.replace(/[^0-9]/g,'').slice(0,8) }),
        Q.text({ id:'cidade', label:'Cidade/UF', placeholder:'Ex.: São Paulo/SP' })
      ]},
      { id:'coberturas', title:'Preferências de cobertura', lead:'Tudo pode ser ajustado depois, aqui é só uma referência.', fields:[
        Q.select({ id:'terceiros', label:'Danos a terceiros (LMI)', options:[
          { value:50000, label:'R$ 50 mil' },
          { value:100000, label:'R$ 100 mil (recomendado)' },
          { value:200000, label:'R$ 200 mil' },
          { value:300000, label:'R$ 300 mil' },
          { value:500000, label:'R$ 500 mil' },
        ]}),
        Q.select({ id:'assistencia', label:'Assistência 24h (raio)', options:[
          { value:100, label:'100 km' },
          { value:200, label:'200 km (recomendado)' },
          { value:400, label:'400 km' },
          { value:9999, label:'Brasil' },
        ]}),
        Q.select({ id:'vidros', label:'Cobertura de vidros', options:[
          { value:'basico', label:'Básico (para-brisa)' },
          { value:'ampliado', label:'Ampliado (vidros + faróis)' },
          { value:'completo', label:'Completo (inclui retrovisores)' },
        ]}),
        Q.select({ id:'carroReserva', label:'Carro reserva', options:[
          { value:'7', label:'7 dias' },
          { value:'15', label:'15 dias' },
          { value:'30', label:'30 dias' },
          { value:'nao', label:'Não quero' },
        ]}),
        Q.select({ id:'franquia', label:'Franquia', options:[
          { value:'majorada', label:'Majorada (mensal menor)' },
          { value:'normal', label:'Normal' },
          { value:'reduzida', label:'Reduzida (mensal maior)' },
        ]}),
      ]},
      { id:'resumo', title:'Prévia do prêmio e coberturas', lead:'Valores indicativos. Na cotação real podem variar por seguradora e regras de subscrição.', fields:[], summary:true },
      { id:'contato', title:'Como prefere seguir?', lead:'Podemos concluir a cotação agora mesmo.', fields:[
        Q.text({ id:'whats', label:'Seu WhatsApp (com DDD)', placeholder:'Ex.: 11 90000-0000', required:false }),
        Q.text({ id:'email', label:'Seu e‑mail', placeholder:'Ex.: voce@email.com', required:false }),
      ]},
    ];

    // ===== Render =====
    function renderSteps() {
      stepsEl.innerHTML = steps.map((s, i) => `
        <section class="step" id="step-${s.id}" aria-hidden="true" aria-labelledby="h-${s.id}">
          <div class="kicker">Passo ${i+1} de ${steps.length}</div>
          <h1 id="h-${s.id}">${ typeof s.title === 'function' ? s.title() : s.title }</h1>
          <p class="lead">${ typeof s.lead === 'function' ? s.lead() : s.lead }</p>
          ${ s.fields?.map(f => f.render()).join('') || '' }
          <div class="hint" id="hint-${s.id}"></div>
        </section>
      `).join('');
    }

    function renderSummary() {
      const wrap = document.getElementById('step-resumo');
      const { premioAnual, premioMensal, taxaBase, fator } = riskPricing();
      const html = `
        <div class="summary" style="margin-top:10px;">
          <div class="pill"><div class="t">Prêmio mensal estimado</div><div class="v">${fmt.format(premioMensal)}</div></div>
          <div class="pill"><div class="t">Prêmio anual estimado</div><div class="v">${fmt.format(premioAnual)}</div></div>
          <div class="pill"><div class="t">Taxa base (sobre FIPE)</div><div class="v">${(taxaBase*100).toFixed(2)}%</div></div>
          <div class="pill"><div class="t">Ajuste de perfil (fator)</div><div class="v">× ${fator.toFixed(2)}</div></div>
          <div class="pill"><div class="t">Terceiros (LMI)</div><div class="v">${fmt.format(Number(state.terceiros||0))}</div></div>
          <div class="pill"><div class="t">Assistência 24h</div><div class="v">${state.assistencia == 9999 ? 'Brasil' : state.assistencia + ' km'}</div></div>
          <div class="pill"><div class="t">Vidros</div><div class="v">${labelVidros(state.vidros)}</div></div>
          <div class="pill"><div class="t">Carro reserva</div><div class="v">${state.carroReserva=='nao'?'Sem carro reserva': state.carroReserva + ' dias'}</div></div>
          <div class="pill"><div class="t">Franquia</div><div class="v">${capitalize(state.franquia||'')}</div></div>
        </div>
        <p class="lead" style="margin-top:10px;">Valores indicativos para fins de triagem. Na proposta formal, podemos cotar em múltiplas seguradoras, ajustar franquia, rastreador, cobertura de acessórios e mais.</p>
      `;
      wrap.querySelector('#hint-resumo').innerHTML = html;
    }

    function labelVidros(v){
      if(v==='completo') return 'Completo';
      if(v==='ampliado') return 'Ampliado';
      return 'Básico';
    }
    function capitalize(s){ return (s||'').charAt(0).toUpperCase()+ (s||'').slice(1); }

    // ===== Navigation / Validation =====
    let current = 0;
    function showStep(index) {
      current = Math.max(0, Math.min(index, steps.length - 1));
      document.querySelectorAll('.step').forEach((el, i) => {
        el.classList.toggle('active', i === current);
        el.setAttribute('aria-hidden', i === current ? 'false' : 'true');
      });
      const pct = ((current) / (steps.length - 1)) * 100;
      progressEl.style.width = `${pct}%`;
      stepCounter.textContent = `${current+1}/${steps.length}`;
      btnBack.disabled = current === 0;
      btnNext.textContent = current === steps.length - 1 ? 'Concluir' : 'Continuar';

      if (steps[current].summary) renderSummary();
    }

    function collectAndValidate() {
      const step = steps[current];
      let ok = true;
      (step.fields || []).forEach(f => {
        const v = f.value();
        const valid = f.validate(v);
        document.getElementById(`err-${f.id}`)?.classList.toggle('show', !valid);
        if (!valid) ok = false; else f.onSave(v);
      });
      return ok;
    }

    function saveDraft(){ localStorage.setItem('autoQuizState', JSON.stringify(state)); }

    function buildShareText(){
      const price = riskPricing();
      const nome = state.nome || 'Cliente';
      return `Pré‑proposta — Seguro Auto%0A`+
        `Nome: ${encodeURIComponent(nome)}%0A`+
        `Veículo: ${encodeURIComponent(state.marcaModelo || '')} / ${encodeURIComponent(state.anoModelo || '')}%0A`+
        `Valor FIPE: ${encodeURIComponent(fmt.format(state.valorFipe || 0))}%0A`+
        `Uso: ${encodeURIComponent(state.usoVeiculo || '')} | Pernoite: ${encodeURIComponent(state.pernoite || '')}%0A`+
        `Cidade/UF: ${encodeURIComponent(state.cidade || '')} | CEP: ${encodeURIComponent(state.cep || '')}%0A`+
        `Idade condutor: ${encodeURIComponent(state.idade || '')} | Bônus: ${encodeURIComponent(state.classeBonus || 0)}%0A`+
        `Sinistros 36m: ${encodeURIComponent(state.sinistros36 || 0)}%0A`+
        `Terceiros: ${encodeURIComponent(fmt.format(Number(state.terceiros||0)))} | Assist.: ${encodeURIComponent(state.assistencia==9999?'Brasil':state.assistencia+' km')}%0A`+
        `Vidros: ${encodeURIComponent(labelVidros(state.vidros))} | Franquia: ${encodeURIComponent(state.franquia || '')}%0A`+
        `Carro reserva: ${encodeURIComponent(state.carroReserva=='nao'?'Não':state.carroReserva+' dias')}%0A`+
        `Prêmio mensal estimado: ${encodeURIComponent(fmt.format(price.premioMensal))} | Anual: ${encodeURIComponent(fmt.format(price.premioAnual))}`;
    }

    btnBack.addEventListener('click', () => { current = Math.max(0, current - 1); showStep(current); });
    btnNext.addEventListener('click', () => {
      if (!collectAndValidate()) return;
      saveDraft();
      if (current === steps.length - 1) {
        alert('Obrigado! Recebemos suas informações. Em seguida entraremos em contato para concluir a cotação.');
        return;
      }
      current = Math.min(steps.length - 1, current + 1);
      showStep(current);
      refreshShare();
    });
    btnSave.addEventListener('click', () => { saveDraft(); btnSave.textContent='Salvo ✓'; setTimeout(()=>btnSave.textContent='Salvar',1200); });
    document.addEventListener('keydown', (e) => { if (e.key === 'Enter' && document.activeElement && document.activeElement.tagName === 'INPUT') { e.preventDefault(); btnNext.click(); } });

    function refreshShare(){
      const msg = buildShareText();
      const whatsNumber = '55XXXXXXXXXXX'; // Substitua por DDI+DDD+número
      ctaWhats.href = `https://wa.me/${whatsNumber}?text=${msg}`;
      ctaEmail.href = `mailto:contato@seudominio.com?subject=${encodeURIComponent('Pré‑proposta — Seguro Auto')}&body=${msg}`;
    }

    // Init
    renderSteps();
    showStep(0);
    refreshShare();
  </script>
</body>
</html>
